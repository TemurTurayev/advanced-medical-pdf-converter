# ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç)

def check_required_software():
    missing = []
    install_instructions = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DjVuLibre
    if not shutil.which('ddjvu'):
        missing.append('DjVuLibre (ddjvu)')
        install_instructions['DjVuLibre (ddjvu)'] = {
            'Windows': '–°–∫–∞—á–∞–π—Ç–µ DjVuLibre —Å http://djvu.sourceforge.net/djvulibre-windows.html',
            'Linux': 'sudo apt-get install djvulibre-bin',
            'MacOS': 'brew install djvulibre'
        }
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            
    return missing, install_instructions

def main():
    st.title("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –î–æ–∫—É–º–µ–Ω—Ç –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
    
    with st.expander("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", expanded=True):
        if os.path.exists(POPPLER_PATH):
            st.success("‚úÖ Poppler –Ω–∞–π–¥–µ–Ω")
        else:
            st.error(f"‚ùå Poppler –Ω–µ –Ω–∞–π–¥–µ–Ω: {POPPLER_PATH}")
            
        if os.path.exists(TESSERACT_PATH) and check_tesseract():
            st.success("‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω")
        else:
            st.error(f"‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω: {TESSERACT_PATH}")
            st.stop()
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–û —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        missing_software, install_instructions = check_required_software()
        if missing_software:
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ü–û:")
            for software in missing_software:
                st.warning(f"- {software}")
                if software in install_instructions:
                    with st.expander(f"üì• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {software}"):
                        for os_name, instruction in install_instructions[software].items():
                            st.markdown(f"**{os_name}**: `{instruction}`")
        else:
            st.success("‚úÖ –í—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")

    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ main())

if __name__ == "__main__":
    main()