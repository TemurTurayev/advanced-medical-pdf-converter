import streamlit as st
import os
import tempfile
import logging
import json
from pathlib import Path
from src.converters.docx_converter import DocxConverter
from src.converters.pptx_converter import PptxConverter
from src.converters.html_converter import HtmlConverter
from src.converters.image_converter import ImageConverter
from src.converters.csv_converter import CsvConverter
from src.converters.xml_json_converter import XmlJsonConverter
from utils.system_check import verify_system_requirements

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize converters
converters = {
    '.docx': DocxConverter(),
    '.doc': DocxConverter(),
    '.pptx': PptxConverter(),
    '.ppt': PptxConverter(),
    '.html': HtmlConverter(),
    '.htm': HtmlConverter(),
    '.jpg': ImageConverter(),
    '.jpeg': ImageConverter(),
    '.png': ImageConverter(),
    '.tiff': ImageConverter(),
    '.bmp': ImageConverter(),
    '.csv': CsvConverter(),
    '.json': XmlJsonConverter(),
    '.xml': XmlJsonConverter()
}

# Cache dictionary loading
@st.cache_data
def load_cached_dictionary():
    from src.utils.medical_terms import load_medical_dictionary
    return load_medical_dictionary()

# Set page config
st.set_page_config(
    page_title='–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    layout='wide'
)

# Title and description
st.title('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤')
st.markdown("""–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: DOCX, PDF
- üìÉ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: PPTX
- üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, TIFF, BMP
- üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, JSON, XML, HTML""")

# System checks
st.header('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')

# Verify system requirements
system_ok, system_message = verify_system_requirements()

# Display results with proper formatting
for line in system_message.split('\n'):
    if '‚úì' in line:
        st.success(line)
    else:
        st.error(line)

if not system_ok:
    st.error('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.')
    st.stop()

# File uploader
st.header('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')

# Get supported file extensions
supported_formats = set()
for converter in converters.values():
    supported_formats.update(converter.get_supported_formats())

# Add output format selection with descriptions
st.subheader('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
col1, col2 = st.columns(2)

with col1:
    output_format = st.radio(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:',
        ['TXT', 'HTML', 'JSON'],
        help='TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç\nHTML - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–≤\nJSON - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    )

with col2:
    process_tables = st.checkbox(
        '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã',
        value=True,
        help='–ò–∑–≤–ª–µ–∫–∞—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
    )
    
    highlight_terms = st.checkbox(
        '–ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã',
        value=True,
        help='–í—ã–¥–µ–ª—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤'
    )

# File uploader
uploaded_files = st.file_uploader(
    '',
    type=list(supported_formats),
    accept_multiple_files=True
)

if uploaded_files:
    # Progress bar for multiple files
    progress_bar = st.progress(0)
    
    for i, uploaded_file in enumerate(uploaded_files):
        try:
            # Update progress
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            
            # Get file extension
            file_ext = Path(uploaded_file.name).suffix.lower()
            
            # Create temporary file
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_ext) as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_path = tmp_file.name

            # Get appropriate converter
            converter = converters.get(file_ext)
            
            if converter:
                # Process file
                with st.spinner(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ {uploaded_file.name}...'):
                    result = converter.convert(
                        tmp_path,
                        process_tables=process_tables,
                        extract_terms=highlight_terms
                    )
                    
                    # Create result files
                    base_name = Path(uploaded_file.name).stem
                    
                    if output_format == 'TXT':
                        output_file = f"{base_name}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt"
                        with open(output_file, 'w', encoding='utf-8') as f:
                            f.write(result['text'])
                            if process_tables and result.get('tables'):
                                f.write('\n\n–¢–ê–ë–õ–ò–¶–´:\n')
                                for table in result['tables']:
                                    for row in table:
                                        f.write('\t'.join(str(cell) for cell in row) + '\n')
                                    f.write('\n')
                        
                        with open(output_file, 'r', encoding='utf-8') as f:
                            st.download_button(
                                label=f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                                data=f.read(),
                                file_name=output_file,
                                mime='text/plain'
                            )
                    
                    elif output_format == 'HTML':
                        output_file = f"{base_name}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.html"
                        with open(output_file, 'w', encoding='utf-8') as f:
                            html_content = result['text']
                            
                            if highlight_terms:
                                for term in result['terms']:
                                    html_content = html_content.replace(
                                        term['term'],
                                        f'<span title="{term["definition"]}" '
                                        f'style="background-color: #e6f3ff;">{term["term"]}</span>'
                                    )
                            
                            if process_tables and result.get('tables'):
                                html_content += '\n<h2>–¢–∞–±–ª–∏—Ü—ã:</h2>\n'
                                for table in result['tables']:
                                    html_content += '\n<table border="1">\n'
                                    for row in table:
                                        html_content += '<tr>'
                                        for cell in row:
                                            html_content += f'<td>{cell}</td>'
                                        html_content += '</tr>\n'
                                    html_content += '</table>\n'
                            
                            f.write(f"""<html>
                            <head>
                                <meta charset="utf-8">
                                <style>
                                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                                    table {{ border-collapse: collapse; margin: 10px 0; }}
                                    td, th {{ padding: 8px; }}
                                </style>
                            </head>
                            <body>{html_content}</body>
                            </html>""")
                        
                        with open(output_file, 'r', encoding='utf-8') as f:
                            st.download_button(
                                label=f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                                data=f.read(),
                                file_name=output_file,
                                mime='text/html'
                            )
                    
                    else:  # JSON
                        output_file = f"{base_name}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.json"
                        with open(output_file, 'w', encoding='utf-8') as f:
                            # Filter results based on user settings
                            if not process_tables:
                                result.pop('tables', None)
                            if not highlight_terms:
                                result.pop('terms', None)
                            
                            json.dump(result, f, ensure_ascii=False, indent=2)
                        
                        with open(output_file, 'r', encoding='utf-8') as f:
                            st.download_button(
                                label=f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                                data=f.read(),
                                file_name=output_file,
                                mime='application/json'
                            )

                # Success message
                st.success(f'‚úÖ {uploaded_file.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!')

            # Cleanup
            os.unlink(tmp_path)
            if 'output_file' in locals():
                os.unlink(output_file)

        except Exception as e:
            st.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uploaded_file.name}: {str(e)}')
            logger.error(f'Error processing {uploaded_file.name}: {str(e)}')
            continue

    st.success('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
# Footer
st.markdown('---')
st.markdown("""
<div style='text-align: center'>
    <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</p>
    <p>–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Turayev_Temur | temurturayev7822@gmail.com</p>
</div>
""", unsafe_allow_html=True)